import numpy as np
import os 
import codecs
import argparse
import enum
from multiprocessing import Process

# Enum for size units
class SIZE_UNIT(enum.Enum):
   BYTES = 1
   KB = 2
   MB = 3
   GB = 4
def convert_unit(size_in_bytes, unit):
   """ Convert the size from bytes to other units like KB, MB or GB"""
   if unit == SIZE_UNIT.KB:
       return size_in_bytes/1024
   elif unit == SIZE_UNIT.MB:
       return size_in_bytes/(1024*1024)
   elif unit == SIZE_UNIT.GB:
       return size_in_bytes/(1024*1024*1024)
   else:
       return size_in_bytes
def get_file_size(file_name, size_type = SIZE_UNIT.BYTES ):
   """ Get file in size in given unit like KB, MB or GB"""
   size = os.path.getsize(file_name)
   return convert_unit(size, size_type)

parse = argparse.ArgumentParser()
parse.add_argument('-i','--input')
args = parse.parse_args()
input_dir = args.input
output_dir = input_dir + '.csv'
'''
opcodes = ['jmp', 'mov', 'retf', 'push', 'pop', 'xor', 'retn', 'nop', 'sub', 'inc', 'dec', 'add','imul', 'xchg', 'or', 'shr', 'cmp', 'call', 'shl', 'ror', 'rol', 'jnb','jz','rtn','lea','movzx']
registers=['%edx','%esi','%eax','%ebx','%ecx','%edi','%ebp','%esp','%eip']
registers_ori = ['edx','esi','eax','ebx','ecx','edi','ebp','esp','eip']
'''
opcodes = ['jmp', 'mov', 'push', 'pop', 'xor', 'nop', 'sub', 'inc', 'dec', 'add','imul', 'xchg', 'or', 'shr', 'cmp', 'call', 'shl', 'ror','lea']
registers=['%edx','%esi','%eax','%ebx','%ecx','%edi','%ebp','%esp']
registers_ori = ['edx','esi','eax','ebx','ecx','edi','ebp','esp']
def asmprocess():
    results = open(output_dir,"w+")
    # results.write('ID,'+'sample_size,'+','.join(ele for ele in (opcodes + registers_ori))+','+'\n')
    results.write('ID,'+','.join(ele for ele in (opcodes + registers_ori))+','+'\n')
    samples = os.listdir(input_dir)
    for sample in samples:
        opcodescount=np.zeros(len(opcodes),dtype=int)
        registerscount=np.zeros(len(registers),dtype=int)
        name_sample = sample.split('.')[0]
        results.write(name_sample+',')
        file = codecs.open(os.path.join(input_dir,sample),encoding='cp1252',errors ='replace')
        # size_sample = get_file_size(os.path.join(input_dir,sample))   
        for lines in file:
            line = lines.rstrip().split()
            for i in range(len(opcodes)):
                if any(opcodes[i] == li for li in line):
                    opcodescount[i] += 1
            for i in range(len(registers)):
                if any(registers[i] == li for li in line):
                    registerscount[i] += 1

        # results.write(str(size_sample)+',')                                 
        for opcode in opcodescount:
            results.write(str(opcode)+",")
        for register in registerscount:
            results.write(str(register)+",")
        results.write("\n")
    results.close()

def main():
    p1=Process(target=asmprocess())
    p1.start()
    p1.join()
if __name__=="__main__":
    main()  